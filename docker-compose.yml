version: '3.8'

services:
  authservice:
    env_file: .env
    build: . # Builds an image from the Dockerfile in the current directory
    ports:
      - "8081:8081"
    depends_on: # Define service dependencies that must be started first
      postgres:
        condition: service_healthy # Wait until postgres healthcheck passes
    environment:
      - SPRING_PROFILES_ACTIVE=prod # activate application-prod.properties
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_LIQUIBASE_URL=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      - SPRING_LIQUIBASE_USER=${DB_USER}
      - SPRING_LIQUIBASE_PASSWORD=${DB_PASSWORD}
    networks:
      - myproject-network

  postgres:
    image: postgres:15
    env_file: .env
    environment:
      POSTGRES_DB: authdb # Creates a DB on startup
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432" # Forwards the PostgreSQL port to the host
    volumes:
      - postgres-data:/var/lib/postgresql/data # Saves data to "volume"
    healthcheck: # Container Health Check
      test: ["CMD-SHELL", "pg_isready -U postgres"]  # Check command
      interval: 5s # Checking every 5 seconds
      timeout: 5s # Checking timeout
      retries: 5 # Number of attempts
    networks:
      - myproject-network

volumes:
  postgres-data: # Creates a named volume to store PostgreSQL data.

networks: # added a network to make all services to be in the same network and the DNS error went away (userservice cannot find the redis service)
  myproject-network:
    driver: bridge